import Head from "next/head";
import { useRouter } from "next/router";
import { Pagination } from "@geist-ui/core";
import { GET_ANIMES } from "../../api/queries";
import AnimeCard from "../../components/AnimeCard";
import { Grid, Heading, Container, Text } from "../../components/styled";
import { initializeApollo } from "../../api/apollo";
import { useQuery } from "@apollo/client";

const Home = ({ page }) => {
  const router = useRouter();
  const { data, error } = useQuery(GET_ANIMES, {
    variables: {
      page: page || 1,
      perPage: 10,
    },
  });

  const animes = data?.Page?.media;
  const pageInfo = data?.Page?.pageInfo || {};
  const { currentPage, lastPage } = pageInfo;

  return (
    <>
      <Head>
        <title>Anilist Collection</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <Heading>Explore Anime</Heading>

        {error && <Text center>Error fetching data.</Text>}
        {animes && animes.length === 0 && (
          <Text center>No data available.</Text>
        )}
        <Grid>
          {animes &&
            animes.map(
              ({
                id,
                title,
                description,
                episodes,
                coverImage,
                averageScore,
              }) => (
                <AnimeCard
                  key={id}
                  id={id}
                  title={title}
                  description={description}
                  episodes={episodes}
                  coverImage={coverImage}
                  averageScore={averageScore}
                />
              )
            )}
        </Grid>

        <Container center>
          <Pagination
            page={currentPage}
            initialPage={currentPage}
            count={lastPage}
            limit={5}
            margin="auto"
            onChange={(newPage) =>
              newPage !== currentPage &&
              router.push({ pathname: "/anime", query: { page: newPage } })
            }
          />
        </Container>
      </Container>
    </>
  );
};

export default Home;

export async function getServerSideProps({ query }) {
  const { page } = query;
  const pageInt = parseInt(page);

  const apolloClient = initializeApollo();
  await apolloClient.query({
    query: GET_ANIMES,
    variables: {
      page: pageInt || 1,
      perPage: 10,
      ids: undefined,
    },
  });

  return {
    props: {
      initialApolloState: apolloClient.cache.extract(),
      page: pageInt,
    },
  };
}
